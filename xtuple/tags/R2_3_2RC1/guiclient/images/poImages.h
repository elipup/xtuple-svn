/*
 * Common Public Attribution License Version 1.0. 
 * 
 * The contents of this file are subject to the Common Public Attribution 
 * License Version 1.0 (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License 
 * at http://www.xTuple.com/CPAL.  The License is based on the Mozilla 
 * Public License Version 1.1 but Sections 14 and 15 have been added to 
 * cover use of software over a computer network and provide for limited 
 * attribution for the Original Developer. In addition, Exhibit A has 
 * been modified to be consistent with Exhibit B.
 * 
 * Software distributed under the License is distributed on an "AS IS" 
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See 
 * the License for the specific language governing rights and limitations 
 * under the License. 
 * 
 * The Original Code is PostBooks Accounting, ERP, and CRM Suite. 
 * 
 * The Original Developer is not the Initial Developer and is __________. 
 * If left blank, the Original Developer is the Initial Developer. 
 * The Initial Developer of the Original Code is OpenMFG, LLC, 
 * d/b/a xTuple. All portions of the code written by xTuple are Copyright 
 * (c) 1999-2007 OpenMFG, LLC, d/b/a xTuple. All Rights Reserved. 
 * 
 * Contributor(s): ______________________.
 * 
 * Alternatively, the contents of this file may be used under the terms 
 * of the xTuple End-User License Agreeement (the xTuple License), in which 
 * case the provisions of the xTuple License are applicable instead of 
 * those above.  If you wish to allow use of your version of this file only 
 * under the terms of the xTuple License and not to allow others to use 
 * your version of this file under the CPAL, indicate your decision by 
 * deleting the provisions above and replace them with the notice and other 
 * provisions required by the xTuple License. If you do not delete the 
 * provisions above, a recipient may use your version of this file under 
 * either the CPAL or the xTuple License.
 * 
 * EXHIBIT B.  Attribution Information
 * 
 * Attribution Copyright Notice: 
 * Copyright (c) 1999-2007 by OpenMFG, LLC, d/b/a xTuple
 * 
 * Attribution Phrase: 
 * Powered by PostBooks, an open source solution from xTuple
 * 
 * Attribution URL: www.xtuple.org 
 * (to be included in the "Community" menu of the application if possible)
 * 
 * Graphic Image as provided in the Covered Code, if any. 
 * (online at www.xtuple.com/poweredby)
 * 
 * Display of Attribution Information is required in Larger Works which 
 * are defined in the CPAL as a work which combines Covered Code or 
 * portions thereof with code not governed by the terms of the CPAL.
 */

#ifndef _QEMBED_1804289383
#define _QEMBED_1804289383
#include <qimage.h>
#include <qdict.h>
static const unsigned char newPurchaseOrder_data[] = {
    0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,
    0x0d,0x0d,0x0d,0x0d,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x01,0x0d,0x01,0x00,
    0x00,0x00,0x00,0x00,0x00,0x01,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,
    0x0d,0x0d,0x01,0x0d,0x0d,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x0d,0x0a,
    0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x01,0x0d,0x0d,0x0d,0x01,0x00,
    0x00,0x00,0x00,0x01,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0c,0x08,0x0d,0x0d,
    0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x0d,0x0d,0x0d,0x0d,
    0x0d,0x0c,0x05,0x02,0x06,0x0a,0x0c,0x0c,0x0c,0x0c,0x0c,0x01,0x00,0x00,
    0x00,0x01,0x0d,0x0a,0x0a,0x0a,0x05,0x02,0x02,0x02,0x02,0x02,0x07,0x09,
    0x08,0x09,0x0a,0x01,0x00,0x00,0x00,0x01,0x0d,0x0d,0x0d,0x0d,0x03,0x03,
    0x07,0x03,0x09,0x04,0x09,0x07,0x0c,0x0b,0x0b,0x01,0x00,0x00,0x00,0x01,
    0x0d,0x0d,0x0d,0x0c,0x02,0x04,0x05,0x03,0x0a,0x08,0x0b,0x0a,0x0a,0x0a,
    0x0a,0x01,0x00,0x00,0x00,0x01,0x0d,0x0a,0x0a,0x0a,0x03,0x02,0x03,0x03,
    0x09,0x07,0x08,0x09,0x08,0x08,0x0a,0x01,0x00,0x00,0x00,0x01,0x0d,0x0d,
    0x0d,0x0c,0x0c,0x03,0x02,0x02,0x02,0x04,0x0a,0x0b,0x0a,0x01,0x0a,0x01,
    0x00,0x00,0x00,0x01,0x0d,0x0d,0x0c,0x0c,0x0c,0x0c,0x07,0x03,0x03,0x02,
    0x01,0x08,0x0a,0x0a,0x09,0x01,0x01,0x00,0x00,0x01,0x0d,0x0a,0x0a,0x08,
    0x09,0x08,0x05,0x03,0x07,0x02,0x04,0x01,0x07,0x01,0x08,0x01,0x00,0x00,
    0x00,0x01,0x0d,0x0d,0x0c,0x0b,0x04,0x09,0x07,0x03,0x04,0x02,0x04,0x06,
    0x01,0x0b,0x01,0x01,0x00,0x00,0x00,0x01,0x0c,0x0c,0x0c,0x0a,0x04,0x02,
    0x03,0x02,0x02,0x01,0x08,0x01,0x01,0x0b,0x0b,0x01,0x00,0x01,0x00,0x01,
    0x0c,0x0c,0x0c,0x0b,0x0a,0x08,0x04,0x03,0x04,0x07,0x06,0x07,0x01,0x01,
    0x01,0x01,0x00,0x00,0x00,0x01,0x0c,0x0c,0x0b,0x0a,0x0c,0x0a,0x08,0x05,
    0x08,0x06,0x09,0x01,0x0a,0x01,0x0a,0x01,0x00,0x00,0x00,0x01,0x0c,0x0c,
    0x0c,0x0c,0x0a,0x0a,0x0a,0x0a,0x0a,0x09,0x01,0x0a,0x0a,0x08,0x09,0x01,
    0x01,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00
};

static const QRgb newPurchaseOrder_ctable[] = {
    0xc6c6c6,0xff000000,0xff551f00,0xff7f1f00,0xffd43f55,0xffd45f55,0xffd47f55,0xffd47faa,0xffd49faa,0xffff9faa,0xffffbfaa,0xffffdfaa,0xfffffbf0,0xffffffff,
    0xffffffff
};

/* Generated by qembed */
static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 20, 20, 8, (const unsigned char*)newPurchaseOrder_data, 15, newPurchaseOrder_ctable, TRUE, "newPurchaseOrder" },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};

static const QImage& qembed_findImage( const QString& name )
{
    static QDict<QImage> dict;
    QImage* img = dict.find( name );
    if ( !img ) {
	for ( int i = 0; embed_image_vec[i].data; i++ ) {
	    if ( strcmp(embed_image_vec[i].name, name.latin1()) == 0 ) {
		img = new QImage((uchar*)embed_image_vec[i].data,
			    embed_image_vec[i].width,
			    embed_image_vec[i].height,
			    embed_image_vec[i].depth,
			    (QRgb*)embed_image_vec[i].colorTable,
			    embed_image_vec[i].numColors,
			    QImage::BigEndian );
		if ( embed_image_vec[i].alpha )
		    img->setAlphaBuffer( TRUE );
		dict.insert( name, img );
		break;
	    }
	}
	if ( !img ) {
	    static QImage dummy;
	    return dummy;
	}
    }
    return *img;
}

#endif
