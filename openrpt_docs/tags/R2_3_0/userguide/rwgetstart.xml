<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<?xml-stylesheet href="docbook-omfg.css" type="text/css"?>
<chapter>
  <title id="i554447">Getting Started</title>

  <para>In this chapter, we will be taking a hands-on approach to illustrate
  fundamental report writer functionality. The exercises will focus on the
  embedded OpenMFG report writer, connected to an OpenMFG Database. However,
  the fundamentals described here also apply to the standalone OpenRPT
  application.</para>

  <sect1 id="i554553">
    <title>Modifying an Existing Report</title>

    <para>The best way to illustrate report writer functionality is to work
    with an existing report definition—rather than create a new one from
    scratch. So, for this first exercise we will be modifying a report
    definition called “UsersMasterList.” The “UsersMasterList” report
    definition is a stock OpenMFG report designed to provide information about
    OpenMFG users.</para>

    <note>
      <title>Note</title>

      <para>The data used in this exercise is pulled from a sample OpenMFG
      Database.</para>
    </note>

    <para>To begin, we must first log in to OpenMFG. By logging in, we
    automatically connect to an OpenMFG Database. The user information we will
    be working with is stored in the OpenMFG Database.</para>

    <para>We can access the “UsersMasterList” report by selecting the
    “Reports” option from the “Master Information” section of the System
    Module. Scroll down the master list of report definitions until you reach
    the “UsersMasterList” report. Highlight the report, then select the EDIT
    button. The following screen will appear:</para>

    <para><figure>
        <title>Users Master List Report Definition</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_050_RepDef.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>In the Report Writer Basics chapter, we discussed the importance of
    grades—and how multiple versions of the same report may be stored on a
    database using different grades. By default, OpenMFG uses the report
    definition having the highest grade.</para>

    <para>To differentiate our working version of the “UsersMasterList” report
    definition from the standard version, we will save it with a different
    grade. To save a report definition with a different grade, select the
    “Save to DB” option from the “Database” menu. The following screen will
    appear:</para>

    <para><figure>
        <title>Save Report to Database with a Higher Grade</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_070_DBGrade50.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We will keep the same name, but change the grade to 50. When we
    select the OK button, the report definition is saved to the
    database.</para>

    <note>
      <title>Tip</title>

      <para>If you want to save your changes to the database, be sure to
      select the “Save to DB” option. Report definitions stored on a local or
      network drive may also be saved to a database in this way.</para>
    </note>

    <para>We have now made a copy of the report definition—and assigned it a
    high grade (“50”). When OpenMFG runs the report, it will use our version
    of the report definition because ours has been assigned the highest grade
    in the sample database.</para>

    <sect2 id="i553538">
      <title>Query Sources Overview</title>

      <para>The report writer uses Structured Query Language (SQL) to retrieve
      information from a database. In this section, we will look at how report
      definitions use SQL queries to collect the information which is
      displayed in a report.</para>

      <para>To view the SQL query associated with the “UsersMasterList” report
      definition, select the “Query Sources” option from the “Document” menu.
      The following screen will appear:</para>

      <para><figure>
          <title>Query List</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_075_QueryList.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The query master list shows all the queries defined for a report
      definition. In this case, only one query has been defined. To view the
      query, double-click on it—or highlight it and then select EDIT. The
      following screen will appear:</para>

      <para id="i555117"><figure>
          <title>Query Editor Showing SQL Statement</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_100_SQL.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The basic SQL query structure used by many report definitions
      reads as follows: SELECT (column) FROM (table) WHERE (condition) and,
      optionally, ORDER BY (column). The query shown in <xref
      linkend="i555117" /> follows this basic format.</para>

      <para>Readers familiar with SQL may have noticed portions of the
      statement surrounded by &lt;?...?&gt; tags. These tags signal the use of
      MetaSQL. MetaSQL is an embedded query language designed to make SQL
      queries dynamic. The MetaSQL language was developed by OpenMFG for use
      by the report writer.</para>

      <note>
        <title>Note</title>

        <para>For more information on MetaSQL, the embedded query language
        designed by OpenMFG to make SQL queries dynamic, please see the
        Advanced Topics chapter.</para>
      </note>

      <para>We could edit the query shown in <xref linkend="i555117" />, using
      the query editor. But at this point, we simply want to familiarize
      ourselves with the query. We will be making cosmetic changes to the
      report in the next sections.</para>
    </sect2>

    <sect2>
      <title>Editing Labels</title>

      <para>Label objects contain static text displayed in a report. Text is
      considered static if it resides in a report definition and is not pulled
      dynamically from a database. A report title is an example of static text
      contained within a Label object. In our next exercise, we will show how
      to modify a report title.</para>

      <para>To change the title appearing on the “UsersMasterList” report
      definition, locate the Label object containing the title in the Report
      Header section. The title of the report is “Users Master List.”
      Double-clicking on the object will open the Label properties screen. We
      will change the text of the Label and align the text on the left margin,
      as shown in the following screen:</para>

      <para><figure>
          <title>Modified Label Properties</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_105_LabelProps.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>After we have made the changes, we select the OK button. The
      changes are now applied to the Label object. Finally, we click on the
      Label object and drag it to the left-hand margin of the report
      definition—then save the report definition to the database. All these
      changes appear in the following screenshot:</para>

      <para><figure>
          <title>Report Definition Showing Updated Label</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_110_ModfiedLabel.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <note>
        <title>Tip</title>

        <para>Using your mouse, you can click on a Label object and drag it to
        a new position. Or you can resize a Label object, using the handles on
        the perimeter of the object.</para>
      </note>
    </sect2>

    <sect2 id="i571645">
      <title>Editing Fields</title>

      <para>Field objects contain dynamic information retrieved from a
      database. The dynamic information is pulled into the Field using query
      sources. For this exercise, we will be making a cosmetic change to the
      user name Field. The user name Field is the Field used to print user
      names on the “UsersMasterList” report. Later, we will add a new Field
      object.</para>

      <para>Our goal in this exercise is to increase the font size used to
      print user names on the “UsersMasterList” report. By default, these
      names are printed in 8-pt font. We will be increasing the font size to
      14-pt.</para>

      <para>To begin, we must first locate the Field object which contains the
      user name Field. We find it partially obscured on the left-hand margin
      of the Detail section. It is the Field having the name
      “usr_username:detail”, as shown in the following screen:</para>

      <para><figure>
          <title>Standard Size Font for User Name Field</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_112_UserField1.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <note>
        <title>Note</title>

        <para>Don’t be concerned if Field objects overlap, causing the names
        which identify them to become partially obscured. This is common when
        Field objects are located adjacent to each other.</para>
      </note>

      <para>To edit the properties of the user name Field, we double-click on
      the Field object. The following Field properties screen will
      appear.</para>

      <para id="i556383"><figure>
          <title>Field Properties</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_120_FieldProp1.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see in <xref linkend="i556383" />, the query source
      being used to populate the Field is the “detail” query source. This is
      the same query source we looked at in the <xref linkend="i553538" />
      section. The “detail” query uses SQL to retrieve user information from
      the database the report writer is connected to. The column referenced in
      <xref linkend="i556383" />—that is, <synopsis>usr_username</synopsis>—
      is one of the columns mentioned in the “detail” query’s SELECT
      statement. Only this column will be used when retrieving data into the
      Field. All other columns referenced in the SELECT statement will be
      ignored.</para>

      <note>
        <title>Note</title>

        <para>This explains how Field names are determined: They begin with
        the name of a column referenced in a query source, and are followed by
        the name of the very same query source. And so, in our current
        example, we get “usr_username:detail.”</para>
      </note>

      <para>For now, we are concerned only with changing the font size used to
      print user names on the “UsersMasterList” report. We select the FONT
      button at the bottom of the screen and specify a 14-pt font size. After
      we select the OK button, we see the change reflected in the report
      definition, as shown below:</para>

      <para><figure>
          <title>Enlarged Font Size for User Name Field</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_125_UserField2.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>For now, we won’t worry about the length of the Field. We will,
      however, adjust the height of the Field object to accommodate the larger
      font. Once we have saved our changes to the database, we can run the
      report and see how our updates have affected the printed results.</para>

      <para>To run the report from within OpenMFG, open the “Maintain Users”
      option from the System Module menu. After selecting the PRINT button,
      the report will print out as follows:</para>

      <para id="i556741"><figure>
          <title>Modified Report Output</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_130_RunReport.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see in <xref linkend="i556741" />, the user names have
      in fact been printed in 14-pt font, as expected. The information
      contained in other Fields—active status, proper name, initials,
      etc.—still appears in the default 8-pt font. Notice that the printed
      title of the report has also been modified, per our report definition
      changes.</para>
    </sect2>

    <sect2>
      <title>Adding Bar codes</title>

      <para>Now that we have a made a few cosmetic changes to a report
      definition, we are now ready to make a more significant change. In this
      next exercise, we will add a Bar code object to print user names in Bar
      code format.</para>

      <para>The mechanics of adding a Bar code object <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Barcode.png" />
          </imageobject>
        </mediaobject> are the same as adding a human-readable Field object
      <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Field.png" />
          </imageobject>
        </mediaobject>. When we are done, we will have a report that looks
      like the following:</para>

      <para><figure>
          <title>Preview of Report with Bar Codes Added</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_150_ReportWithBarcode.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>We will be adding the Bar code object just below the Field object
      containing the human-readable user name. To do so, we first need to
      expand the lower boundary of the “UsersMasterList” Detail
      section.</para>

      <note>
        <title>Tip</title>

        <para>To expand the height of a section, simply hold your mouse over
        the lower boundary of the section. When the double arrows of the
        resize cursor appear, use your mouse to expand the section.</para>
      </note>

      <para>Once the Detail section has been expanded, we select the Bar code
      button <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Barcode.png" />
          </imageobject>
        </mediaobject> from the toolbar and then click in the section just
      below the user name Field. We have now inserted the Bar code object into
      the report definition, as shown in the following screen.</para>

      <para><figure>
          <title>Bar Code Object Inserted into Report Definition</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_135_AddBarcode.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>We must now specify the properties of the Bar code object. To do
      so, we double-click on the Bar code object. The following screen will
      appear:</para>

      <para id="i558356"><figure>
          <title>Bar Code Properties</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_140_BarcodeProp.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Like Field objects, Bar code objects contain dynamic information
      retrieved from a database. As you can see in <xref linkend="i558356" />,
      the Bar code properties screen requires a Query Source and column name.
      The dynamic information we need for this exercise is the same as we
      needed in the <xref linkend="i571645" /> section—namely, user names
      retrieved from the <synopsis>usr</synopsis> table. The only difference
      here is that we will be representing user names in Bar code format. We
      enter the following parameters:</para>

      <simpara>Format: 3of9</simpara>

      <itemizedlist>
        <listitem>
          <para> The report writer supports the following Bar code formats:
          3of9, 3of9+, 128, ean13, ean8, upc-a, and upc-e. </para>
        </listitem>
      </itemizedlist>

      <simpara>Query Source: detail</simpara>

      <simpara>Column: usr_username</simpara>

      <simpara>Maximum Length of Value: 10</simpara>

      <itemizedlist>
        <listitem>
          <para> Specifies the maximum number of characters the Bar code is
          expected to contain. </para>
        </listitem>
      </itemizedlist>

      <para>After we select the OK button, we see the Bar code object has been
      updated in the report definition, as shown below:</para>

      <para><figure>
          <title>Detail Section with Bar Code Added</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_145_BarcodeDetail.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see, the Bar code object is now identified with the
      name “usr_username:detail barcode.” This name refers to the column and
      Query Source which will be used to generate user name data in Bar code
      format. Before we save our changes to the database, we click on the
      right side of the Bar code object and drag it to make it longer.</para>

      <para>We have now successfully created a Bar code object that will print
      in “3of9” format—one of several widely-used Bar code formats supported
      by the report writer. Now let’s print the report and see the
      results.</para>

      <para>To print the Users Master List, select the “Maintain Users” option
      from the System Module menu. When the master list of users appears,
      select the PRINT button. The following screen shows a portion of the
      printed report:</para>

      <para><figure>
          <title>Report with Bar-Coded Username</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_150_ReportWithBarcode.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see, the final result matches the result we expected to
      see when we began this section. The user names on the Users Master List
      are now both human-readable and machine-readable.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Column Headings</title>

    <para>The “UsersMasterList” report definition utilizes three different
    Header types: Page Header (First), Page Header (Any), and Report Header.
    The following screenshot shows how each of these Headers fits within the
    report definition:</para>

    <para><figure>
        <title>Technique for Managing Report Title and Column Headings</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_160_Headers.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>You may be wondering if we need both a Page Header (First) and a
    Page Header (Any)—particularly since the Page Header (First) is empty. But
    this technique actually serves a useful purpose, as explained
    below:</para>

    <simpara>Page Header (First): This is blank because the Report Header,
    which always displays on the first page only, contains column headings.
    The Page Header (Any) also contains column headings. Following the report
    writer’s rules of precedence, a Page Header (First), if defined, prints in
    place of a Page Header (Any). This logic ensures the Page Header (Any)
    does not print on the first page—and so we avoid having two sets of column
    headings on the first page.</simpara>

    <note>
      <title>Note</title>

      <para>For more information on precedence and other Header details, see
      the “Report Headers” and “Page Headers” sections in the Report Writer
      Basics chapter.</para>
    </note>

    <simpara>Page Header (Any): This Header contains the column headings that
    appear on the second page and all subsequent pages. The Page Header (Any)
    will not print on the first page because a Page Header (First) is
    defined.</simpara>

    <simpara>Report Header: The Report Header displays on the first page only.
    In this case, the Report Header contains both a report title and report
    columns.</simpara>

    <sect2 id="i549548">
      <title>Modifying Column Headings</title>

      <para>For this exercise, we will change the wording of the “Locale”
      column heading. As you can see in the following screenshot, this column
      heading appears in both the Page Header (Any) and Report Header
      sections:</para>

      <para><figure>
          <title>Locale Column Heading Selected</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabel.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>A Locale is frequently used to define a user’s language. And so,
      for the purpose of this exercise, let’s change the column heading from
      “Locale” to “Language.” To edit the column heading, double-click on the
      Label object which contains the text. The following screen will
      appear:</para>

      <para id="i563365"><figure>
          <title>Label Properties for Column Heading</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see in <xref linkend="i563365" />, we have entered the
      new wording in the “Text” field. We make the same change to the “Locale”
      column heading found in the Report Header. And after saving the changes
      to the database, we see them both applied to the report definition, as
      shown below:</para>

      <para><figure>
          <title>Label Changed for Locale Column Heading</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The techniques used to edit Label objects are the same regardless
      of where a Label object is located in the report definition.</para>
    </sect2>

    <sect2 id="i548203">
      <title>Adding Column Headings</title>

      <para>Over the course of the next few sections, we will perform the
      steps necessary to add email addresses to our Users Master List. The
      first step is to add a column heading. The new “Email Address” column
      heading will ensure the data we retrieve from the database is labeled
      appropriately.</para>

      <para>To add the new column heading, we select the Label button
      <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Label.png" />
          </imageobject>
        </mediaobject> from the toolbar and then click in the Page Header
      (Any) section. We place the Label object to the right of the “Language”
      column heading, as shown in the following screen:</para>

      <para><figure>
          <title>Adding New Column Headings</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabel.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Now that we have placed the Label object, we must define its
      properties. Double-clicking on the Label object opens the Label
      properties screen:</para>

      <para id="i564291"><figure>
          <title>Column Heading Properties</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see in <xref linkend="i564291" />, we have entered
      “Email Address” in the “Text” field. This is the text which will appear
      as a column heading. We repeat the same steps to add the same new column
      heading to the Report Header section. And after moving the Label objects
      into place using our mouse and saving the changes to the database, the
      column headings are located where we want them, as shown in the
      following screen:</para>

      <para><figure>
          <title>Email Address Labels Added to Report Definition</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_175_EmailAddress.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Adding column headings for email addresses is only the first step
      in the multi-step process of inserting email addresses into the report.
      In the following sections, we will examine how to retrieve the needed
      information from the database.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Modifying Query Sources</title>

    <para>We’ve successfully added a column heading called “Email Address” to
    our report definition. Now we need to work on retrieving user email
    addresses from the database. To begin, let’s look at the Query Sources
    defined for this report definition. To view the available Query Sources,
    select the “Query Sources” option from the “Database” menu. The following
    screen will appear:</para>

    <para><figure>
        <title>Query List</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_075_QueryList.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As we have seen before, the “detail” Query Source is the only Query
    Source defined for the “UsersMasterList” report definition. To open the
    Query Source for editing, simply double-click on it, or highlight it and
    select the EDIT button. The following screen will appear:</para>

    <para id="i564487"><figure>
        <title>Query Source for “UsersMasterList” Report</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_100_SQL.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Because we are familiar with our sample database, we know the
    <synopsis>usr</synopsis> table has a column called <synopsis>usr_email</synopsis>,
    which stores user email addresses. However, if we look closely at the
    SELECT statement in <xref linkend="i564487" />, we do not see references
    to the <synopsis>usr_email</synopsis> column. Without a reference to the
    <synopsis>usr_email</synopsis> column, we will not be able to retrieve
    user email address information from the database. We need to add that
    reference to the SELECT statement.</para>

    <sect2>
      <title>Editing SQL Statements</title>

      <para>As we saw in the previous section, the SELECT statement in our
      Query Source does not refer to the <synopsis>usr_email</synopsis>
      column. Without that column reference, we will not be able to retrieve
      user email address information from the database. In this section, we
      will edit the SELECT statement so the <synopsis>usr_email</synopsis>
      column is referenced.</para>

      <para>The SQL found in the “Query” display of a Query Source is straight
      text. It can be edited in the same was as any text can be edited. We
      simply click in the SELECT statement after the reference to the
      <synopsis>usr_initials</synopsis> column. Then, after hitting ENTER to
      create an extra line, we type in the <synopsis>usr_email</synopsis>
      reference, as shown below:</para>

      <para><figure>
          <title>Email Column Added to SQL SELECT Statement</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_180_EmailSQL.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>We are careful to add a comma “,” at the end of the <synopsis>usr_email </synopsis>reference,
      to indicate the column is one in a series of columns data may be
      retrieved from. To save the edited SQL, select the OK button. Finally,
      we save all report definition changes to the database.</para>

      <para>In our next step, we will add a new Field object to the Detail
      section of the report definition. The Field object will handle the
      display of user email addresses retrieved from the database.</para>
    </sect2>

    <sect2>
      <title>Retrieving Data</title>

      <para>Field objects are used to display dynamic data retrieved from a
      database. Typically, they are placed in the Detail section of a report
      definition. In this section, we will add a Field object to handle our
      user email addresses.</para>

      <para>To add a Field object to the report definition, we select the
      Field button <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Field.png" />
          </imageobject>
        </mediaobject> from the toolbar and then click in the Detail section.
      We place the Field object to the far-right of the section, lined up
      beneath the “Email Address” column heading, as shown in the following
      screen:</para>

      <para><figure>
          <title>New Field Added to Report Definition</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_182_EmailField.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Now that we have placed the Field object, we must define its
      properties. Double-clicking on the Field object opens the Field
      properties screen:</para>

      <para id="i565574"><figure>
          <title>Properties for Email Address Field</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_184_FieldProps.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see in <xref linkend="i565574" />, we have filled in
      the following information:</para>

      <simpara>Query Source: We selected the “detail” query from the list of
      available Query Sources. This is the query whose SELECT statement
      includes the newly-added reference to the <synopsis>usr_email</synopsis>
      column.</simpara>

      <simpara>Column: Here we enter the name of the <synopsis>usr_email</synopsis>
      column—since this is the column whose data we need for the Field object.
      A column must be referenced in the SELECT statement of the associated
      Query Source to successfully retrieve data from the database.</simpara>

      <simpara>Preview: The preview shows us both the name assigned to the
      Field object (“usr_email:detail”) and also the font choice. To make the
      font consistent with the other Field objects in the report definition,
      we select the FONT button and specify 8-pt bold Arial.</simpara>

      <para>After we select the OK button, we see the Field object has been
      updated in the report definition, as shown below:</para>

      <para><figure>
          <title>Field Object for Displaying User Email Addresses</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_185_FieldUpdated.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>We have now added the Field object to the report definition—and
      aligned it correctly beneath the “Email Address” column headings. Once
      we save the report definition changes to the database, we will be ready
      to run the report and see the results.</para>

      <para>To run the Users Master List report from OpenMFG, select the
      “Maintain Users” option from the System Module menu. After selecting the
      PRINT button, the following report is generated:</para>

      <para><figure>
          <title>Email Address Appearing on Printed Report</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_186_EmailPrinted.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>As you can see, the user email addresses have been successfully
      added to the the report.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Total Fields</title>

    <para>We have seen how Field objects may be used to retrieve text (i.e.,
    user email addresses) from a database. In this section, we will show how
    to create running totals using Field objects.</para>

    <para>Our goal for this exercise is to provide a running total of all
    active users. There are currently three active users in the database. We
    will add a fourth user and make that user inactive, as shown in the
    following screen:</para>

    <para><figure>
        <title>Master List of OpenMFG Users</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_190_UserList.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>If we are successful, the Field object should ignore the inactive
    user and include only the three active users in the running total.</para>

    <para>To begin, we will create a Report Footer section in the report
    definition. As you may recall, Report Footers print only on the last page
    of a report—which is exactly what we want. We want the running total to
    print at the end of the report.</para>

    <note>
      <title>Note</title>

      <para>For more information on Report Footers, see the “Report Footers”
      section in the Report Writer Basics chapter.</para>
    </note>

    <para>To create a Report Footer section, we select the “Section Editor”
    option from the “Document” menu. The following screen will appear:</para>

    <para id="i566106"><figure>
        <title>Add Report Footer Using Section Editor</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_191_RepFooter.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i566106" />, we have selected the
    “Report Footer” option. Selecting this option causes a Report Footer to be
    added to the report definition, as shown in the following screen:</para>

    <para><figure>
        <title>Report Footer Section Added to Report Definition</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_192_FooterAdded.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now that we have added the Report Footer section, our next step is
    to add a Field object to the section. The Field object will display the
    running total of all active users.</para>

    <para>To add a Field object to the report definition, we select the Field
    button <mediaobject>
        <imageobject>
          <imagedata fileref="images/Toolbar_Field.png" />
        </imageobject>
      </mediaobject> from the toolbar and then click in the Report Footer
    section. We place the Field object in the section, as shown in the
    following screen:</para>

    <para><figure>
        <title>Field Object Added to Report Footer Section</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_193_TotalField.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now that we have placed the Field object, we must define its
    properties. Double-clicking on the Field object opens the Field properties
    screen:</para>

    <para id="i568493"><figure>
        <title>Properties for Running Total Field</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_194_TotalProps.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i568493" />, we have filled in the
    following properties for the running total Field object:</para>

    <simpara>Query Source: We selected the “detail” query from the list of
    available Query Sources. This is the query whose SELECT statement includes
    the reference to the <synopsis>usr_active</synopsis> column.</simpara>

    <simpara>Column: Here we enter the name of the <synopsis>usr_active</synopsis>
    column—since this is the column whose data we need for the Field object. A
    column must be referenced in the SELECT statement of the associated Query
    Source to successfully retrieve data from the database.</simpara>

    <simpara>Display as Running Total: By selecting this option, we indicate
    we want the records on active users to be displayed as a running total.
    When the running total is calculated, active users will be assigned a
    value of “1,” while inactive users will be assigned a value of
    “0.”</simpara>

    <note>
      <title>Note</title>

      <para>When running totals are calculated for columns designated as
      Boolean, the “true” values are assigned a value of “1,” while “false”
      values are assigned a value of “0.” In this example, active users would
      be assigned a value of “1”, while inactive users would be assigned a
      value of “0”.</para>
    </note>

    <simpara>Built-in Locale Format: We specify we want the running total to
    be displayed as a quantity.</simpara>

    <simpara>Preview: The preview shows us both the name assigned to the Field
    object (“usr_active:detail”) and also the font choice. To make the font
    consistent with the other Field objects in the report definition, we
    select the FONT button and specify 8-pt bold Arial.</simpara>

    <para>After we select the OK button, we see the Field object has been
    updated in the report definition, as shown below:</para>

    <para><figure>
        <title>Running Total Field Added</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_195_AddTotalField.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We have added the Field object which will retrieve data from the
    <synopsis>usr_active</synopsis> column and display the information as a
    running total. Next, we need to insert a Label object to appropriately
    identify the Field.</para>

    <para>To add the new Label, we select the Label button <mediaobject>
        <imageobject>
          <imagedata fileref="images/Toolbar_Label.png" />
        </imageobject>
      </mediaobject> from the toolbar and then click in the Report Footer
    section. We place the Label object to the left of the “usr_active:detail”
    Field, as shown in the following screen:</para>

    <para><figure>
        <title>Label Object Added Next to Running Total Field</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_196_TotalLabel.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now that we have placed the Label object, we must define its
    properties. Double-clicking on the Label object opens the Label properties
    screen:</para>

    <para id="i568600"><figure>
        <title>Running Total Label Properties</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_197_TotalLabProps.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i568600" />, we have entered “Total
    Active Users:” in the “Text” field. This text identifies the running
    total, as shown in the following screen:</para>

    <para><figure>
        <title>Label Object Identifying Running Total</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_198_TotalLabel.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We have now added the running total to the report definition—and
    labeled it appropriately. Once we save the report definition changes to
    the database, we will be ready to run the report and see the
    results.</para>

    <para>To run the Users Master List report from OpenMFG, select the
    “Maintain Users” option from the System Module menu. After selecting the
    PRINT button, the following report is generated:</para>

    <para id="i569519"><figure>
        <title>Running Total Appearing on Printed Report</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_199_RunningTotal.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>If we scrutinize <xref linkend="i569519" /> closely, we see the
    appearance of the report would benefit if we added a horizontal line
    separating the user names from the running total. In the next section, we
    will add a separator line.</para>

    <sect2>
      <title>Adding Horizontal Lines</title>

      <para>Lines make reports easier to view. In this section, we will add a
      horizontal Line to separate the user names from the running total at the
      bottom of the report.</para>

      <para>To add a Line, we select the Line button <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Line.png" />
          </imageobject>
        </mediaobject> from the toolbar and then click in the Report Footer
      section.</para>

      <note>
        <title>Tip</title>

        <para>If you hold down the SHIFT key when you are dragging a Line
        object, this will keep the Line perfectly straight. Also, to
        reposition a Line, simply click in its mid-point and drag the object
        to a new location.</para>
      </note>

      <para>We place the Line just above the running total field—and then drag
      the Line using our mouse from the left margin to the right margin.
      Finally, we double-click on the Line object to adjust its properties.
      The following screen appears:</para>

      <para><figure>
          <title>Setting Line Properties</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_205_LineWidth.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>In the “Width” field, we set the width of the Line to “2.” Line
      widths are measured in pixels. After saving our changes to the database,
      we print the Users Master List report. The following screenshot shows
      our result:</para>

      <para><figure>
          <title>Line Added Above Running Total Field</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_210_LineAdded.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>We are almost done modifying the “UsersMasterList” report
      definition for this chapter. However, we still want to display a total
      of all users—as a complement to the running total of active users. We
      will add this additional information in the next section.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Counter Fields</title>

    <para>The last change we will make to the “UsersMasterList” report
    definition in this chapter is to add a total count of all displayed users.
    This total will complement the running total of active users, which we
    have already added, since the “UsersMasterList” report may display both
    active and inactive users.</para>

    <para>To provide this total information, we will add a COUNTER variable to
    the “detail” Query Source. The COUNTER variable will increment by 1 for
    every row returned by a query. For example, if a column contains 10 rows
    of data, the COUNTER will total “10” after the query has been run.</para>

    <para>To add the COUNTER, we open the “detail” Query Source by
    double-clicking on it from the list of available Query Sources. Next, we
    add the COUNTER to the query’s SELECT statement, as shown in the following
    screen:</para>

    <para id="i570032"><figure>
        <title>Counter Added to Query Source</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_215_CounterSQL.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i570032" />, the COUNTER syntax is
    highlighted at the end of the SELECT statement. The “1 AS COUNTER” syntax
    indicates two things: 1) For every row of data retrieved from the
    database, that row will be assigned a value of “1,” and 2) the result set
    of retrieved rows will be stored in memory in a temporary column we have
    called <synopsis>COUNTER</synopsis>.</para>

    <para>Notice we have been careful to add a comma after the reference to
    the <synopsis>locale_code</synopsis> column. The comma separates the
    COUNTER from the other items in the SELECT statement series. We do not
    insert a comma after the COUNTER line.</para>

    <para>Now that we have inserted the COUNTER into the Query Source, we are
    ready to add a Field object to display the results.</para>

    <para>To add a Field object to the report definition, we select the Field
    button <mediaobject>
        <imageobject>
          <imagedata fileref="images/Toolbar_Field.png" />
        </imageobject>
      </mediaobject> from the toolbar and then click in the Report Footer
    section. We place the Field object in the section, as shown in the
    following screen:</para>

    <para><figure>
        <title>Counter Field Added to Report Footer Section</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_222_CounterField.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now that we have placed the Field object, we must define its
    properties. Double-clicking on the Field object opens the Field properties
    screen:</para>

    <para id="i570773"><figure>
        <title>Properties for Counter Field</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_217_CounterProps.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i570773" />, we have filled in the
    following properties for the COUNTER Field object:</para>

    <simpara>Query Source: We selected the “detail” query from the list of
    available Query Sources. This is the query whose SELECT statement includes
    the reference to the temporary <synopsis>COUNTER</synopsis>
    column.</simpara>

    <simpara>Column: Here we enter the name of the temporary <synopsis>COUNTER</synopsis>
    column—since this is the column whose data we need for the Field object. A
    column must be referenced in the SELECT statement of the associated Query
    Source to successfully retrieve data from the database.</simpara>

    <simpara>Display as Running Total: By selecting this option, we indicate
    we want all the records written to the <synopsis>COUNTER</synopsis> column
    to be displayed as a running total. When the running total is calculated,
    each record (i.e., displayed user) will be assigned a value of
    “1.”</simpara>

    <simpara>Built-in Locale Format: We specify we want the running total to
    be displayed as a quantity.</simpara>

    <simpara>Preview: The preview shows us both the name assigned to the Field
    object (“COUNTER:detail”) and also the font choice. To make the font
    consistent with the other Field objects in the report definition, we
    select the FONT button and specify 8-pt bold Arial.</simpara>

    <para>After we select the OK button, we see the Field object has been
    updated in the report definition, as shown below:</para>

    <para><figure>
        <title>Counter Field Added to Report Footer Section</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_223_CounterAdded.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We have added the Field object which will retrieve data from the
    <synopsis>COUNTER</synopsis> column and display the information as a
    running total. Next, we need to insert a Label object to appropriately
    identify the Field.</para>

    <para>To add the new Label, we select the Label button <figure>
        <title>The Label Button</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Toolbar_Label.png" />
          </imageobject>
        </mediaobject>
      </figure> from the toolbar and then click in the Report Footer section.
    We place the Label object to the left of the “COUNTER:detail” Field, as
    shown in the following screen:</para>

    <para><figure>
        <title>Label Object Added Next to Counter Field</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_224_CounterLabel.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now that we have placed the Label object, we must define its
    properties. Double-clicking on the Label object opens the Label properties
    screen:</para>

    <para id="i571069"><figure>
        <title>Counter Label Properties</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_225_CountLabProps.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>As you can see in <xref linkend="i571069" />, we have entered “Total
    Displayed Users:” in the “Text” field. This text identifies the running
    total, as shown in the following screen:</para>

    <para><figure>
        <title>Label Object Identifying Counter</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_226_CountLabAdded.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We have now added a COUNTER to the report definition—and labeled it
    appropriately. Once we save the report definition changes to the database,
    we will be ready to run the report and see the results.</para>

    <para>To run the Users Master List report from OpenMFG, select the
    “Maintain Users” option from the System Module menu. After selecting the
    PRINT button, the following report is generated:</para>

    <para><figure>
        <title>Counter Appearing on Printed Report</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_227_CounterPrint.png" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We have now reached the end of the exercises contained in the <xref
    linkend="i554447" /> chapter. Over the course of this chapter we have
    taken a hands-on approach to learning fundamental report writer
    functionality. You should now understand how the report writer retrieves
    information from a database and displays that information in printed form.
    More advanced functionality will be explored in subsequent
    chapters.</para>
  </sect1>
</chapter>
